b7 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B7.xls')
head(b7)
# a. Fit multi reg relating yield (y) to Co2 pressure (x1), Co2 temperature (x2),
# peanut moisture (x3), Co2 low rate (x4), peanut particle size (x5)
lm_3.11 <- lm(y ~ x1+x2+x3+x4+x5, data=b7)
summary(lm_3.11)
options(scipen = 999)
summary(lm_3.11)
options(scipen = 0)
anova(lm_3.11)
b16 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B16.xls')
head(b16)
# a. Fit multi reg relating yield (y) to Co2 pressure (x1), Co2 temperature (x2),
# peanut moisture (x3), Co2 low rate (x4), peanut particle size (x5)
lm_3.16.LifeExp       <- lm(LifeExp       ~ People.per.TV + People.per.Dr, data=b16)
lm_3.16.LifeExpMale   <- lm(LifeExpMale   ~ People.per.TV + People.per.Dr, data=b16)
lm_3.16.LifeExpFemale <- lm(LifeExpFemale ~ People.per.TV + People.per.Dr, data=b16)
## Note: didnt paste full summary because it was unnecessary. Extracted coefficients from print out:
summary(lm_3.16.LifeExp)
head(b16)
mean(74,67)
sum(74+67)/2
library(gdata)
b1 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B1.xls')
head(b1)
lm_3.1 <- lm(y~x2 + x7 + x8, data=b1)
summary(lm_3.1)
qqnorm(lm_3.1)
qqnorm(lm_3.1$residuals)
qqnorm(lm_3.1$residuals, main="4.2 QQ Plot")
qqline(lm_3.1$residuals, main="4.2 QQ Plot")
qqnorm(lm_3.1$residuals, main="4.2 QQ Plot")
qqline(lm_3.1$residuals, main="4.2 QQ Plot")
qqnorm(lm_3.1$residuals, main="4.2 QQ Plot")
qqline(lm_3.1$residuals, main="4.2 QQ Plot")
plot(b1$y, lm_3.1$residuals)
plot(b1$y, lm_3.1$residuals); abline(0, 0)
plot(b1$y, lm_3.1$residuals, ylab="Residuals", xlab="# Games Won", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
lm_3.1
predict(lm_3.1, type="response")
lm_3.1$y
b1$y
plot(predict(lm_3.1, type="response"),
lm_3.1$residuals,
ylab="Residuals", xlab="# Games Won", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
qqline(lm_3.1$residuals, main="4.2.A QQ Plot", ylim=c("-3", "3"))
qqline(lm_3.1$residuals, main="4.2.A QQ Plot", ylim=c("-3", "3"))
qqline(lm_3.1$residuals, main="4.2.A QQ Plot", ylim=(-3, 3))
qqline(lm_3.1$residuals, main="4.2.A QQ Plot", ylim=("-3", "3"))
c
qqline(lm_3.1$residuals, main="4.2.A QQ Plot", ylim=c("-3", "3"))
qqline(lm_3.1$residuals, main="4.2.A QQ Plot")
library(car)
crPlot(lm_3.1)
crPlot(lm_3.1, variable=y)
crPlot(lm_3.1, variable="y")
lm_3.1
crPlot(lm_3.1, variable="x2")
b1 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B1.xls')
head(b1)
lm_3.1 <- lm(y~x2 + x7 + x8, data=b1)
predict(lm_3.1, type="response")
lm_3.1$residuals
b1$y
3.704942376+6.295058
1.961345432+9.038655
plot(predict(lm_3.1, type="response"),
lm_3.1$residuals,
ylab="Residuals", xlab="# Games Won", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
studres(lm_3.1)
library(MASS)
# b. Residuals vs. Predicted Response. Interpret.
plot(predict(lm_3.1, type="response"),
studres(lm_3.1),
ylab="Residuals", xlab="# Games Won (Fitted)", main="4.2.B Residuals v. Fitted Values")
studres(lm_3.1)
plot(predict(lm_3.1, type="response"),
studres(lm_3.1),
ylab="Residuals", xlab="# Games Won (Fitted)", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
b1 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B1.xls')
head(b1)
lm_3.1 <- lm(y~x2 + x7 + x8, data=b1)
# a. Normal probability plot of the residuals. Any problem with normality assumption?
qqline(lm_3.1$residuals, main="4.2.A QQ Plot")
# The QQ plot does now show any major problems with the assumption of normality.
# b. Residuals vs. Predicted Response. Interpret.
plot(predict(lm_3.1, type="response"),
studres(lm_3.1),
ylab="Residuals", xlab="# Games Won (Fitted)", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
plot(b1$x2,
studres(lm_3.1),
ylab="Residuals", xlab="# Games Won (Fitted)", main="4.2.B Residuals v. Fitted Values")
plot(b1$x2,
studres(lm_3.1),
ylab="Residuals", xlab="X2", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
plot(predict(lm_3.1, type="response"),
studres(lm_3.1),
ylab="Studentized Residuals", xlab="# Games Won (Fitted)", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
rstudent(lm_3.1)
studres(lm_3.1)
rstudent(lm_3.1)
lm_3.1$fit
plot(lm_3.1$fit,
rstudent(lm_3.1))
plot(lm_3.1$fit,
rstudent(lm_3.1)),
ylab="Studentized Residuals", xlab="# Games Won (Fitted)", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
plot(lm_3.1$fit,
rstudent(lm_3.1),
ylab="Studentized Residuals", xlab="# Games Won (Fitted)", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
qqline(rstudent(lm_3.1), main="4.2.A QQ Plot")
b1 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B1.xls')
head(b1)
lm_3.1 <- lm(y~x2 + x7 + x8, data=b1)
# a. Normal probability plot of the residuals. Any problem with normality assumption?
qqline(rstudent(lm_3.1), main="4.2.A QQ Plot")
qqline(rstudent(lm_3.1), main="4.2.A QQ Plot")
qqnorm(rstudent(lm_3.1), main="4.2.A QQ Plot")
qqline()
qqline(rstudent(lm_3.1), main="4.2.A QQ Plot"))
qqline(rstudent(lm_3.1), main="4.2.A QQ Plot")
qqnorm(rstudent(lm_3.1), main="4.2.A QQ Plot")
qqline(rstudent(lm_3.1), main="4.2.A QQ Plot")
lm_3.1$fitted.values
qqnorm(rstudent(lm_3.1), main="4.2.A QQ Plot")
qqline(rstudent(lm_3.1), main="4.2.A QQ Plot")
plot(lm_3.1$fit,
rstudent(lm_3.1),
ylab="Studentized Residuals", xlab="# Games Won (Fitted)", main="4.2.B Residuals v. Fitted Values")
abline(0, 0)
plot(b1$x2, rstudent(lm_3.1), ylab="Residuals", xlab="X2", main="4.2.C Residuals v. Fitted Values")
plot(b1$x7, rstudent(lm_3.1), ylab="Residuals", xlab="X7", main="4.2.C Residuals v. Fitted Values")
plot(b1$x8, rstudent(lm_3.1), ylab="Residuals", xlab="X8", main="4.2.C Residuals v. Fitted Values")
plot(b1$x2, rstudent(lm_3.1), ylab="Residuals", xlab="X2", main="4.2.C Residuals v. Fitted Values"); abline(0, 0)
plot(b1$x7, rstudent(lm_3.1), ylab="Residuals", xlab="X7", main="4.2.C Residuals v. Fitted Values"); abline(0, 0)
plot(b1$x8, rstudent(lm_3.1), ylab="Residuals", xlab="X8", main="4.2.C Residuals v. Fitted Values"); abline(0, 0)
plot(b1$x2, rstudent(lm_3.1), ylab="Residuals", xlab="X2", main="4.2.C Residuals v. Fitted Values\nX2"); abline(0, 0)
plot(b1$x7, rstudent(lm_3.1), ylab="Residuals", xlab="X7", main="4.2.C Residuals v. Fitted Values\nX7"); abline(0, 0)
plot(b1$x8, rstudent(lm_3.1), ylab="Residuals", xlab="X8", main="4.2.C Residuals v. Fitted Values\nX8"); abline(0, 0)
plot(b1$x2, rstudent(lm_3.1), ylab="Residuals", xlab="X2", main="4.2.C Residuals v. Fitted Values\nX2"); abline(0, 0)
plot(b1$x7, rstudent(lm_3.1), ylab="Residuals", xlab="X7", main="4.2.C Residuals v. Fitted Values\nX7"); abline(0, 0)
plot(b1$x8, rstudent(lm_3.1), ylab="Residuals", xlab="X8", main="4.2.C Residuals v. Fitted Values\nX8"); abline(0, 0)
avPlots(lm_3.1)
avPlots(lm_3.1); rlopts(lm_3.1)
avPlots(lm_3.1, marginal.scale=FALSE)
avPlots(lm_3.1, ylim=c("-4","4"))
avPlots(lm_3.1, ylim=("-4","4"))
avPlots(lm_3.1, ylim=(-4,4))
avPlots(lm_3.1, ylim=2)
avPlots(lm_3.1)
avPlots(lm_3.1, main="Added Variable Plots ")
avPlots(lm_3.1, main="4.2.D Added Variable Plots")
avPlots(lm_3.1, main="4.2.D Added Variable Plots")
# e. Compute the studentized residuals and the R-student residuals. What info is conveyed?
rstudent(lm_3.1)
studres(lm_3.1)
rstandard(lm_3.1)
rstudent(lm_3.1)
plot(lm_3.1$fit, rstandard(lm_3.1), ylab="Residuals", xlab="X2", main="4.2.C Residuals v. Fitted Values\nX2"); abline(0, 0)
plot(lm_3.1$fit, rstandard(lm_3.1), ylab="Residuals", xlab="Fitted", main="4.2.E Studentized Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstudent(lm_3.1), ylab="Residuals", xlab="Fitted", main="4.2.E Studentized Residuals v. Fitted Values"); abline(0, 0)
rstandard(lm_3.1)
rstudent(lm_3.1)
plot(lm_3.1$fit, rstandard(lm_3.1), ylab="Residuals", xlab="Fitted", main="4.2.E Studentized Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstudent(lm_3.1), ylab="Residuals", xlab="Fitted", main="4.2.E R-Student Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstudent(lm_3.1)-rstandard(lm_3.1), ylab="Residuals", xlab="Fitted", main="4.2.E R-Student Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstudent(lm_3.1)-rstandard(lm_3.1), ylab="R-Student - Standardized", xlab="Fitted", main="4.2.E R-Student Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstandard(lm_3.1), ylab="Standardized Residuals", xlab="Fitted", main="4.2.E Studentized Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstudent(lm_3.1), ylab="R-Student Residuals", xlab="Fitted", main="4.2.E R-Student Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstudent(lm_3.1)-rstandard(lm_3.1), ylab="R-Student - Standardized", xlab="Fitted", main="4.2.E R-Student Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstandard(lm_3.1), ylab="Standardized Residuals", xlab="Fitted", main="4.2.E Studentized Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstudent(lm_3.1), ylab="R-Student Residuals", xlab="Fitted", main="4.2.E R-Student Residuals v. Fitted Values"); abline(0, 0)
plot(lm_3.1$fit, rstudent(lm_3.1)-rstandard(lm_3.1), ylab="R-Student - Standardized", xlab="Fitted", main="4.2.E R-Student Residuals v. Fitted Values"); abline(0, 0)
rstudent(lm_3.1)-rstandard(lm_3.1)
b3 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B3.xls')
head(b3)
lm_3.5 <- lm(y~x1 + x6, data=b3)
summary(lm_3.5)
qqnorm(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqline(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqnorm(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqline(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqnorm(rstandard(lm_3.5), main="4.4.A QQ Plot")
qqline(rstandard(lm_3.5), main="4.4.A QQ Plot")
qqnorm(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqline(rstudent(lm_3.5), main="4.4.A QQ Plot")
b3 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B3.xls')
head(b3)
lm_3.5 <- lm(y~x1 + x6, data=b3)
summary(lm_3.5)
qqline(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqnorm(lm_3.5$residuals, main="4.4.A QQ Plot")
qqline(lm_3.5$residuals, main="4.4.A QQ Plot")
qqnorm(lm_3.5$resid, main="4.4.A QQ Plot")
qqline(lm_3.5$resid, main="4.4.A QQ Plot")
qqnorm(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqline(rstudent(lm_3.5), main="4.4.A QQ Plot")
# b. Construct and interpret residuals v. predicted value
plot(lm_3.5$fit,
rstudent(lm_3.5),
ylab="Studentized Residuals", xlab="# Games Won (Fitted)", main="4.4.B Residuals v. Fitted Values")
abline(0, 0)
qqline(lm_3.5$residuals, main="4.4.A QQ Plot")
qqnorm(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqline(lm_3.5$residuals, main="4.4.A QQ Plot")
qqline(lm_3.5$df.residual, main="4.4.A QQ Plot")
qqnorm(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqline(lm_3.5$df.residual, main="4.4.A QQ Plot")
qqline(lm_3.5$residuals, main="4.4.A QQ Plot")
qqnorm(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqline(lm_3.5$residuals, main="4.4.A QQ Plot")
qqnorm(lm_3.5$residuals, main="4.4.A QQ Plot")
qqline(lm_3.5$residuals, main="4.4.A QQ Plot")
qqnorm(lm_3.5$residuals, main="4.4.A QQ Plot")
qqline(lm_3.5$residuals, main="4.4.A QQ Plot")
plot(lm_3.5$fit,
rstudent(lm_3.5),
ylab="Studentized Residuals", xlab="# Games Won (Fitted)", main="4.4.B Residuals v. Fitted Values")
abline(0, 0)
avPlots(lm_3.5, main="4.4.C Added Variable Plots")
plot(lm_3.5$fit, rstudent(lm_3.5)-rstandard(lm_3.5), ylab="R-Student - Standardized", xlab="Fitted", main="4.4.D R-Student Residuals v. Fitted Values"); abline(0, 0)
library(MPV)
lm_2.12.a <- lm(usage~temp, data=p2.12)
summary(lm_2.12.a)
library(MPV)
lm_2.12.a <- lm(usage~temp, data=p2.12)
summary(lm_2.12.a)
qqnorm(lm_2.12.a$residuals, main="4.4.A QQ Plot")
qqline(lm_2.12.a$residuals, main="4.4.A QQ Plot")
qqnorm(rstudent(lm_3.5), main="4.4.A QQ Plot")
qqline(rstudent(lm_3.5), main="4.4.A QQ Plot")
library(MPV)
lm_2.12.a <- lm(usage~temp, data=p2.12)
summary(lm_2.12.a)
qqnorm(rstudent(lm_2.12.a), main="4.4.A QQ Plot")
qqline(rstudent(lm_2.12.a), main="4.4.A QQ Plot")
qqnorm(rstudent(lm_2.12.a), main="4.8.A QQ Plot")
qqline(rstudent(lm_2.12.a), main="4.8.A QQ Plot")
plot(lm_2.12.a$fit,
rstudent(lm_2.12.a),
ylab="Studentized Residuals", xlab="# Games Won (Fitted)", main="4.4.B Residuals v. Fitted Values")
abline(0, 0)
ylab="Studentized Residuals", main="4.8.B Residuals v. Fitted Values")
plot(lm_2.12.a$fit,
rstudent(lm_2.12.a),
ylab="Studentized Residuals", main="4.8.B Residuals v. Fitted Values")
plot(lm_2.12.a$fit,
rstudent(lm_2.12.a),
ylab="Studentized Residuals", xlab="Fitted Vals", main="4.8.B Residuals v. Fitted Values")
abline(0, 0)
plot(rstudent(lm_2.12.a))
plot(rstudent(lm_2.12.a), main="R-Student residuals vs. collection order")
b5 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B5.xls')
lm_3.8 <- lm(y~x6 + x7, data=b5)
summary(lm_3.8)
lm_3.8.e <- lm(y~x6, data=b5)
summary(lm_3.8.e)
qqnorm(rstudent(lm_3.8), main="4.8.A QQ Plot")
qqline(rstudent(lm_3.8), main="4.8.A QQ Plot")
qqnorm(rstudent(lm_3.8.e), main="4.8.A QQ Plot")
qqline(rstudent(lm_3.8.e), main="4.8.A QQ Plot")
## Model one
lm_3.8 <- lm(y~x6 + x7, data=b5)
summary(lm_3.8)
qqnorm(rstudent(lm_3.8), main="4.13 QQ Plot for Model with X6 & X7")
qqline(rstudent(lm_3.8), main="4.13 QQ Plot for Model with X6 & X7")
## Model 2
lm_3.8.e <- lm(y~x6, data=b5)
summary(lm_3.8.e)
qqnorm(rstudent(lm_3.8.e), main="4.13 QQ Plot for Model with X6 Only")
qqline(rstudent(lm_3.8.e), main="4.13 QQ Plot for Model with X6 Only")
plot(lm_3.8$fit,
rstudent(lm_3.8),
ylab="Studentized Residuals", xlab="Fitted Vals", main="4.13 QQ Plot for Model with X6 & X7\nResiduals v. Fitted Values")
abline(0, 0)
plot(lm_3.8$fit, rstudent(lm_3.8), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.13 QQ Plot for Model with X6 & X7\nResiduals v. Fitted Values")
abline(0, 0)
plot(lm_3.8.e$fit, rstudent(lm_3.8.e), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.13 QQ Plot for Model with X6 Only\nResiduals v. Fitted Values")
abline(0, 0)
PRESS(lm_3.8.e)
PRESS(lm_3.8)
PRESS(lm_3.8.e)
summary(lm_3.8.e)
lm_3.8 <- lm(y~x6 + x7, data=b5)
summary(lm_3.8)
qqnorm(rstudent(lm_3.8), main="4.13 QQ Plot for Model with X6 & X7")
qqline(rstudent(lm_3.8), main="4.13 QQ Plot for Model with X6 & X7")
summary(lm_3.8.e)
qqnorm(rstudent(lm_3.8.e), main="4.13 QQ Plot for Model with X6 Only")
qqline(rstudent(lm_3.8.e), main="4.13 QQ Plot for Model with X6 Only")
summary(lm_3.8.e)
qqnorm(rstudent(lm_3.8.e), main="4.13 QQ Plot for Model with X6 Only")
qqline(rstudent(lm_3.8.e), main="4.13 QQ Plot for Model with X6 Only")
qqnorm(rstudent(lm_3.8), main="4.13 QQ Plot for Model with X6 & X7")
qqline(rstudent(lm_3.8), main="4.13 QQ Plot for Model with X6 & X7")
plot(lm_3.8.e$fit, rstudent(lm_3.8.e), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.13 QQ Plot for Model with X6 Only\nResiduals v. Fitted Values")
abline(0, 0)
plot(lm_3.8$fit, rstudent(lm_3.8), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.13 QQ Plot for Model with X6 & X7\nResiduals v. Fitted Values")
abline(0, 0)
PRESS(lm_3.8)
PRESS(lm_3.8.e)
avPlots(lm_3.8, main="4.4.C Added Variable Plots")
b16 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B16.xls')
head(b16)
b16 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW3/data-table-B16.xls')
head(b16)
lm_3.16.LifeExp       <- lm(LifeExp       ~ People.per.TV + People.per.Dr, data=b16)
lm_3.16.LifeExpMale   <- lm(LifeExpMale   ~ People.per.TV + People.per.Dr, data=b16)
lm_3.16.LifeExpFemale <- lm(LifeExpFemale ~ People.per.TV + People.per.Dr, data=b16)
qqnorm(rstudent(lm_3.16.LifeExp), main="4.25 QQ Plot for LifeExp")
qqline(rstudent(lm_3.16.LifeExp), main="4.25 QQ Plot for LifeExp")
## LifeExpMale
qqnorm(rstudent(lm_3.16.LifeExpMale), main="4.25 QQ Plot for LifeExpMale")
qqline(rstudent(lm_3.16.LifeExpMale), main="4.25 QQ Plot for LifeExpMale")
## LifeExpFemale
qqnorm(rstudent(lm_3.16.LifeExpFemale), main="4.25 QQ Plot for LifeExpFemale")
qqline(rstudent(lm_3.16.LifeExpFemale), main="4.25 QQ Plot for LifeExpFemale")
qqnorm(rstudent(lm_3.16.LifeExp), main="4.25 QQ Plot for LifeExp")
qqline(rstudent(lm_3.16.LifeExp), main="4.25 QQ Plot for LifeExp")
## LifeExpMale
qqnorm(rstudent(lm_3.16.LifeExpMale), main="4.25 QQ Plot for LifeExpMale", add=TRUE)
qqnorm(rstudent(lm_3.16.LifeExp), main="4.25 QQ Plot for LifeExp")
qqline(rstudent(lm_3.16.LifeExp), main="4.25 QQ Plot for LifeExp")
## LifeExpMale
qqnorm(rstudent(lm_3.16.LifeExpMale), main="4.25 QQ Plot for LifeExpMale")
qqline(rstudent(lm_3.16.LifeExpMale), main="4.25 QQ Plot for LifeExpMale")
## LifeExpFemale
qqnorm(rstudent(lm_3.16.LifeExpFemale), main="4.25 QQ Plot for LifeExpFemale")
qqline(rstudent(lm_3.16.LifeExpFemale), main="4.25 QQ Plot for LifeExpFemale")
plot(lm_3.16.LifeExp$fit, rstudent(lm_3.16.LifeExp), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.13 QQ Plot for Model with X6 Only\nResiduals v. Fitted Values")
abline(0, 0)
plot(lm_3.16.LifeExp$fit, rstudent(lm_3.16.LifeExp), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.25 LifeExp\nResiduals v. Fitted Values")
abline(0, 0)
## LifeExpMale
plot(lm_3.16.LifeExpMale$fit, rstudent(lm_3.16.LifeExpMale), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.25 LifeExpMale\nResiduals v. Fitted Values")
abline(0, 0)
## LifeExpFemale
plot(lm_3.16.LifeExpFemale$fit, rstudent(lm_3.16.LifeExpFemale), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.25 LifeExpFemale \nResiduals v. Fitted Values")
abline(0, 0)
b20 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW4/data-table-B20.xls')
head(b20)
colnames(b20) <- c("x1", "x2", "x3", "x4", "x5", "y")
head(b20)
lm_4.29 <- lm(y~., data=b20)
summary(lm_4.29)
lm_4.29 <- lm(y~x5, data=b20)
summary(lm_4.29)
qqnorm(rstudent(lm_4.29), main="4.29 QQ Plot for X5")
qqline(rstudent(lm_4.29), main="4.29 QQ Plot for X5")
b20 = read.xls('/Users/bradyfowler/Documents/Fall Semester/Modeling_6021/HW4/data-table-B20.xls')
colnames(b20) <- c("x1", "x2", "x3", "x4", "x5", "y")
head(b20)
## In problem from 4.29 we regressed X5 against Y. Assume thats what they want here:
lm_4.29 <- lm(y~x5, data=b20)
summary(lm_4.29)
## Make QQ plot:
qqnorm(rstudent(lm_4.29), main="4.29 QQ Plot for X5")
qqline(rstudent(lm_4.29), main="4.29 QQ Plot for X5")
lm_4.29 <- lm(y~., data=b20)
summary(lm_4.29)
## Make QQ plot:
qqnorm(rstudent(lm_4.29), main="4.29 QQ Plot for X5")
qqline(rstudent(lm_4.29), main="4.29 QQ Plot for X5")
lm_4.29 <- lm(y~., data=b20)
summary(lm_4.29)
plot(lm_4.29$fit, rstudent(lm_4.29), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.29 Residuals v. Fitted Values")
abline(0, 0)
qqnorm(rstudent(lm_4.29), main="4.29 QQ Plot for X5")
qqline(rstudent(lm_4.29), main="4.29 QQ Plot for X5")
plot(lm_4.29$fit, rstudent(lm_4.29), ylab="Studentized Residuals", xlab="Fitted Vals", main="4.29 Residuals v. Fitted Values")
abline(0, 0)
head(p5.2)
plot(p5.2)
plot(p5.2, main="5.2 Scatter Plot", xlab="X")
plot(p5.2, main="5.2 Scatter Plot")
lm_5.2 <- lm(vapor~temp, data=p5.2)
summary(lm_5.2)
abline(lm_5.2)
qqnorm(rstudent(lm_5.2), main="5.2 QQ Plot for Temp")
qqline(rstudent(lm_5.2), main="5.2 QQ Plot for Temp")
plot(lm_5.2$fit, rstudent(lm_5.2), ylab="Studentized Residuals", xlab="Fitted Vals", main="5.2 Residuals v. Fitted Values")
abline(0, 0)
p5.2.trans <- p5.2
p5.2.trans$transformed <- -1/p5.2.trans$temp
p5.2.trans
plot(p5.2.trans, main="5.2 Scatter Plot")
plot(p5.2.trans$vapor, p5.2.trans$transformed, main="5.2 Scatter Plot")
plot(p5.2.trans$transformed, p5.2.trans$vapor, main="5.2 Scatter Plot")
library(dplyr); library(ggplot2); library(lubridate); library(geosphere); library(plyr)
library(dplyr); library(ggplot2); library(lubridate); library(geosphere); library(plyr)
####################################################################################
## begin matching uber data to crime data
####################################################################################
## import latitude and longitude locations for each coordinate location in uber data
lat.long <- read.csv("/Users/bradyfowler/Documents/Fall Semester/Mining_6018/case1-crime/Data/awsLocations.csv")
#plot to see distribution
ggplot(lat.long, aes(x=longitude, y=latitude)) + geom_point() + coord_equal()
library(dplyr); library(ggplot2); library(lubridate); library(geosphere); library(plyr)
####################################################################################
## begin matching uber data to crime data
####################################################################################
## import latitude and longitude locations for each coordinate location in uber data
lat.long <- read.csv("/Users/bradyfowler/Documents/Fall Semester/Mining_6018/case1-crime/Data/awsLocations.csv")
#plot to see distribution
ggplot(lat.long, aes(x=longitude, y=latitude)) + geom_point() + coord_equal()
## import uberx data
setwd("/Users/bradyfowler/Documents/Fall Semester/Mining_6018/case1-crime/output/")
load("uberx.Rda")
## join lat/long details into uberx
## remove unnecessary columns and cast the timestamps
uber.x2  <- left_join(uber.x, lat.long, by=c("start_location_id"="locations")) %>%
select(-end_location_id, -expected_wait_time, -product_type)
uber.x2$timestamp <- ymd_hms(uber.x2$timestamp, tz = "UTC")
head(uber.x2)
## roll uber data up to the nearest hour
uber.x2$timestamp.half <- uber.x2$timestamp
minute(uber.x2$timestamp.half)<- floor(minute(uber.x2$timestamp)/30)*30
second(uber.x2$timestamp.half)<-0
# groupby timestamp and location and average surge/low/high
uber.x2.roll <- uber.x2 %>%
dplyr::group_by(start_location_id, latitude, longitude) %>%
#dplyr::group_by(timestamp.half, start_location_id, latitude, longitude) %>%
dplyr::summarise(avg.surge = mean(surge_multiplier, na.rm=TRUE),
avg.low   = mean(low_estimate, na.rm=TRUE),
avg.high  = mean(high_estimate, na.rm=TRUE))
## import crime data and fix column names
crime <- read.csv("/Users/bradyfowler/Documents/Fall Semester/Mining_6018/case1-crime/Data/Crime_Incidents__2016.csv")
colnames(crime)<-tolower(c("long", "lat", colnames(crime)[3:length(crime)]))
nrow(crime)
# 22,223
# format dates:
crime$reportdatetime    <- ymd_hms(crime$reportdatetime, tz = "UTC")
crime$lastmodifieddate  <- ymd_hms(crime$lastmodifieddate, tz = "UTC")
crime$start_date        <- ymd_hms(crime$start_date, tz = "UTC")
crime$end_date          <- ymd_hms(crime$end_date, tz = "UTC")
## check date overlap: crime data should be longer timeframe than uber:
crime %>% summarise(min(reportdatetime), max(reportdatetime))
uber.x2 %>% summarise(min(timestamp.half), max(timestamp.half))
## limit crime data to be inside uber dates:
crime<-crime[crime$reportdatetime>min(uber.x2$timestamp.half) &
crime$reportdatetime<max(uber.x2$timestamp.half),]
nrow(crime)
# 2,228 total crimes in timeframe
## look at offense scatter across DC
ggplot(crime, aes(x=long, y=lat, color=offense)) + geom_point() + coord_equal()
## look at offense type distribution
crime %>%
group_by(offense)  %>%
dplyr::summarise(count=n()) %>%
mutate(freq = count / sum(count)) %>%
arrange(desc(count))
#                     offense count         freq
#                THEFT/OTHER   868 0.3895870736
#               THEFT F/AUTO   719 0.3227109515
#                    ROBBERY   218 0.0978456014
# ASSAULT W/DANGEROUS WEAPON   147 0.0659784560
#        MOTOR VEHICLE THEFT   135 0.0605924596
#                   BURGLARY   114 0.0511669659
#                  SEX ABUSE    15 0.0067324955
#                   HOMICIDE    10 0.0044883303
#                      ARSON     2 0.0008976661
# Probably only want to concentrate on non property crimes
# extract items of interest from crime table
crime_list<- crime %>%
#filter(offense %in% c("THEFT/OTHER", "ROBBERY", "ASSAULT W/DANGEROUS WEAPON", "BURGLARY")) %>%#, "SEX ABUSE", "HOMICIDE")) %>%
#filter(offense %in% c("ROBBERY")) %>%
select(long, lat, reportdatetime, objectid)
nrow(crime_list)
# 2228
######################################################################
## find nearest uber point for each crime
## use distm to create matrix of closest uber points
## add closest uber point to crime table along with its distance
######################################################################
for (i in 1:nrow(crime_list)) {
crime.point <- crime_list[i,1:2]
dists <- distm(crime.point, lat.long[,c("longitude","latitude")])
min_uber_id <- which(dists==min(dists))
min_uber_dist <- min(dists)
min_uber_point <- lat.long[min_uber_id,]
crime_list$uber.lat[i] <- min_uber_point[,1]
crime_list$uber.long[i] <- min_uber_point[,2]
crime_list$uber.location[i] <- min_uber_point[,3]
crime_list$uber.dist[i] <- min_uber_dist
}
# whats the distribution of distances for the "nearest"
summary(crime_list$uber.dist)
hist(crime_list$uber.dist)
## most crimes can be matched to a uber call within 200 meters ~80%
## check point clustering with a few examples:
ggplot(subset(crime_list, uber.location==116), aes(x=long, y=lat, colour=factor(uber.location))) +
geom_point() +coord_equal() + guides(colour=FALSE) +
xlim(min(crime_list$long), max(crime_list$long))+
ylim(min(crime_list$lat), max(crime_list$lat)) +
geom_point(data=subset(lat.long, locations==116), aes(x=longitude, y=latitude, colour="black"))
ggplot(crime_list, aes(x=long, y=lat, colour=factor(uber.location))) +
geom_point() +coord_equal() + guides(colour=FALSE)
## check point clustering with a few examples:
ggplot(subset(crime_list, uber.location==100), aes(x=long, y=lat, colour=factor(uber.location))) +
geom_point() +coord_equal() + guides(colour=FALSE) +
xlim(min(crime_list$long), max(crime_list$long))+
ylim(min(crime_list$lat), max(crime_list$lat)) +
geom_point(data=subset(lat.long, locations==100), aes(x=longitude, y=latitude, colour="black"))
